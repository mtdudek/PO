class Funkcja
  @fun
  @@e =0.000000000001
  @@krok = 0.001
  @@krok_c = 0.000001
  @@zero = 0.000001
  class Pair
    def initialize(a,b)
      @first=a
      @second=b
    end
    def first()
      @first
    end
    def second()
      @second
    end
  end
  def initialize(f)
    if f.respond_to?("call")
      @fun=f
    else
      raise "Oczekiwano funkcji"
    end
  end
  def value(x)
    @fun.call(x)
  end
  def poch(x)
    (self.value(x+@@e)-self.value(x))/@@e
  end 
  def pole (a,b)
    odp=0
    while a<b
      t=a+@@krok_c
      if t>b
        t=b;
      end
      h=self.value(a)+self.value(t)
      h/=2
      odp+=h*(t-a)
      a+=@@krok_c
    end 
    odp
  end
  def zerowe (a,b,e)
    t=Array.new()
    while a+@@krok<=b
      if self.value(a)*self.value(a+@@krok) < 0
        t.push(Pair.new(a,a+@@krok))
      elsif self.poch(a)*self.poch(a+@@krok) <0
        t.push(Pair.new(a,a+@@krok))
      end
      a+=@@krok
    end
    if a<b && ( self.value(a)*self.value(b) < 0 ||
                self.poch(a)*self.poch(b) <0)
      t.push(Pair.new(a,b))
    end
    odp = Array.new()
    0.upto(t.size-1) do |x|
      p=t[x].first
      k=t[x].second
      while p+e<k
        s=(p+k)/2
        if self.value(p)*self.value(k) < 0
          if self.value(p)*self.value(s) < 0
            k=s
          else
            p=s
          end
        else
          if self.poch(p)*self.poch(s) < 0
            k=s
          else
            p=s
          end
        end
      end
      if self.value(p)*self.value(k)<0
        odp.push(p)
      elsif self.value(p)<@@zero
        odp.push(p)
      elsif self.value(k)<@@zero
        odp.push(k)
      end
    end
    if odp.size==0
      nil
    else
      odp
    end
  end
end
